[{"C:\\Users\\user\\Desktop\\Labo_project\\client\\src\\components\\Auth\\Register.js":"1","C:\\Users\\user\\Desktop\\Labo_project\\client\\src\\components\\Dashboard\\Dashboard.js":"2","C:\\Users\\user\\Desktop\\Labo_project\\client\\src\\Redux\\store.js":"3","C:\\Users\\user\\Desktop\\Labo_project\\client\\src\\App.js":"4","C:\\Users\\user\\Desktop\\Labo_project\\client\\src\\Redux\\constants\\actionTypes.js":"5","C:\\Users\\user\\Desktop\\Labo_project\\client\\src\\Redux\\reducers\\authReducer.js":"6","C:\\Users\\user\\Desktop\\Labo_project\\client\\src\\index.js":"7","C:\\Users\\user\\Desktop\\Labo_project\\client\\src\\reportWebVitals.js":"8","C:\\Users\\user\\Desktop\\Labo_project\\client\\src\\components\\Dashboard\\AdminProfile.js":"9","C:\\Users\\user\\Desktop\\Labo_project\\client\\src\\Redux\\actions\\authActions.js":"10","C:\\Users\\user\\Desktop\\Labo_project\\client\\src\\components\\Dashboard\\UserProfile.js":"11","C:\\Users\\user\\Desktop\\Labo_project\\client\\src\\components\\Home\\Home.js":"12","C:\\Users\\user\\Desktop\\Labo_project\\client\\src\\components\\Auth\\Login.js":"13"},{"size":3724,"mtime":1607644167094,"results":"14","hashOfConfig":"15"},{"size":897,"mtime":1607644215408,"results":"16","hashOfConfig":"15"},{"size":412,"mtime":1606843375240,"results":"17","hashOfConfig":"15"},{"size":1294,"mtime":1607094211780,"results":"18","hashOfConfig":"15"},{"size":334,"mtime":1606843375232,"results":"19","hashOfConfig":"15"},{"size":1420,"mtime":1606911418013,"results":"20","hashOfConfig":"15"},{"size":689,"mtime":1606843375451,"results":"21","hashOfConfig":"15"},{"size":375,"mtime":1606843375453,"results":"22","hashOfConfig":"15"},{"size":7984,"mtime":1607094106907,"results":"23","hashOfConfig":"15"},{"size":3038,"mtime":1607001246793,"results":"24","hashOfConfig":"15"},{"size":5305,"mtime":1607093136072,"results":"25","hashOfConfig":"15"},{"size":1926,"mtime":1607089426599,"results":"26","hashOfConfig":"15"},{"size":1880,"mtime":1607087117009,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1wzb38v",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\Users\\user\\Desktop\\Labo_project\\client\\src\\components\\Auth\\Register.js",[],["62","63"],"C:\\Users\\user\\Desktop\\Labo_project\\client\\src\\components\\Dashboard\\Dashboard.js",[],["64","65"],"C:\\Users\\user\\Desktop\\Labo_project\\client\\src\\Redux\\store.js",[],["66","67"],"C:\\Users\\user\\Desktop\\Labo_project\\client\\src\\App.js",["68","69"],"\r\nimport React,{useEffect} from 'react'\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport Home from \"./components/Home/Home\";\r\nimport Register from \"./components/Auth/Register\";\r\nimport Login from \"./components/Auth/Login\";\r\nimport Dashboard from './components/Dashboard/Dashboard';\r\nimport { useSelector } from \"react-redux\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { getAuthUser,getAllUsers } from \"./Redux/actions/authActions\";\r\n\r\n\r\nfunction App() {\r\n const { isAuth } = useSelector((state) => state.authReducer);\r\n const { token } = useSelector((state) => state.authReducer);\r\n const { isAdmin } = useSelector((state) => state.authReducer);\r\n const dispatch = useDispatch();\r\n const getUser = () => dispatch(getAuthUser());\r\n \r\n useEffect(() => {\r\n  if (token){\r\n   getUser();\r\n   }}, [token,dispatch]);\r\n\r\n const getUsers = () => dispatch(getAllUsers());\r\n useEffect(() => {\r\n  if(isAdmin===1){\r\n     getUsers()\r\n}}\r\n,[token, isAdmin, dispatch])\r\n\r\n\r\n   return (\r\n      <BrowserRouter>\r\n      <Switch>\r\n    <Route exact path=\"/\" component={isAuth?Dashboard:Home} />\r\n      <Route exact path=\"/register\" component={Register} />\r\n      <Route exact path=\"/login\" component={Login} />\r\n      </Switch>\r\n  </BrowserRouter> \r\n  );\r\n}\r\n\r\nexport default App;\r\n",["70","71"],"C:\\Users\\user\\Desktop\\Labo_project\\client\\src\\Redux\\constants\\actionTypes.js",[],"C:\\Users\\user\\Desktop\\Labo_project\\client\\src\\Redux\\reducers\\authReducer.js",[],"C:\\Users\\user\\Desktop\\Labo_project\\client\\src\\index.js",[],["72","73"],"C:\\Users\\user\\Desktop\\Labo_project\\client\\src\\reportWebVitals.js",[],"C:\\Users\\user\\Desktop\\Labo_project\\client\\src\\components\\Dashboard\\AdminProfile.js",["74"],"import React,{useState, useEffect} from 'react'\r\nimport {Bar, Pie} from 'react-chartjs-2'\r\nimport { Button, Form} from \"react-bootstrap\"\r\nimport { Col } from 'reactstrap';\r\nimport { IconContext } from \"react-icons\";\r\nimport {GoTrashcan} from \"react-icons/go\"\r\nimport {RiLogoutBoxRLine, RiCheckboxCircleLine} from \"react-icons/ri\"\r\nimport {FcStatistics} from \"react-icons/fc\"\r\nimport {FaChevronUp} from \"react-icons/fa\"\r\nimport { useDispatch } from \"react-redux\";\r\nimport { deleteUser, getAllUsers,editUser } from \"../../Redux/actions/authActions\";\r\nimport \"./CSS/AdminProfile.css\"\r\n\r\n\r\nconst AdminProfile = ({setSearch,users,logout}) => {\r\n  const dispatch = useDispatch();\r\n   const [value,setValue]=useState('All')\r\n  const [status,setStatus]=useState('')\r\n  \r\n  let total= users.length\r\n  let  x = users.filter(e => e.status === \"Positive\").length;\r\n  let  y = users.filter(e => e.status === \"Negative\").length;\r\n  let  z = users.filter(e => e.status === \"Not yet\").length;\r\n  \r\n  const [graph, setGraph] = useState({})\r\n  const [graphPie, setGraphPie] = useState({})\r\n  const chart=()=>{\r\n      setGraph ( {\r\n          labels: ['Total','Pending','Positive', 'Negative'],\r\n          datasets: [\r\n              {\r\n                  label: 'Patients Status',\r\n                  data: [total, z, x, y],\r\n                  backgroundColor: [\r\n                    'rgba(153, 102, 255, 1)',        \r\n                    'rgba(255, 206, 86, 1)',\r\n                    'rgba(255, 99, 132, 1)',\r\n                    'rgba(54, 162, 235, 1)'      \r\n        \r\n                                ],\r\n                  borderColor: [\r\n                    'rgba(153, 102, 255, 0.2)',\r\n                    'rgba(255, 206, 86, 0.2)',\r\n                    'rgba(255, 99, 132, 0.2)',\r\n                    'rgba(54, 162, 235, 0.2)'      \r\n                  ],\r\n                  borderWidth: 2\r\n              } ],\r\n                            } );\r\n        setGraphPie({\r\n          labels: ['Pending','Positive', 'Negative'],\r\n          datasets: [\r\n              {\r\n                  label: 'Patients Status',\r\n                  data: [Math.round((z*100)/total), Math.round((x*100)/total), Math.round((y*100)/total)],\r\n                  backgroundColor: [\r\n                    'rgba(255, 206, 86, 1)',\r\n                    'rgba(255, 99, 132, 1)',\r\n                    'rgba(54, 162, 235, 1)'      \r\n                                ],\r\n                  borderColor: [\r\n                    'rgba(255, 206, 86, 0.2)',\r\n                    'rgba(255, 99, 132, 0.2)',\r\n                    'rgba(54, 162, 235, 0.2)'                                    \r\n                  ],\r\n                  borderWidth: 4\r\n              } ],\r\n                            }\r\n        );            \r\n  }\r\n  const options = {\r\n      title:{\r\n       display :true,\r\n       text : \"Patient Numbers By Status\",\r\n       fontSize : 35\r\n      },\r\n      legend:{\r\n       position : \"right\"\r\n      },\r\n          scales: {\r\n              yAxes: [{\r\n                  ticks: {\r\n                     min:0,\r\n                     max:total,\r\n                     stepSize :5\r\n                  }\r\n              }]\r\n          }\r\n      }\r\n  const pieOptions = {\r\n        title:{\r\n         display :true,\r\n         text : \"Patients Status in %\",\r\n         fontSize : 35\r\n        },\r\n        legend:{\r\n         position : \"right\"\r\n        },           \r\n        }\r\n  \r\nuseEffect(() => {\r\n  chart();\r\n }, [users])\r\n\r\n     return (\r\n       <>\r\n        <section id=\"team\" className=\"pb-5 \">\r\n           < div style ={{display:\"flex\", marginBottom:\"35px\"}}>\r\n           <h1 className=\"section-title h1\">Patients List</h1>\r\n     \r\n<div className=\"stat_out\">    \r\n                  <a href=\"#statistics\"><Button className=\"stat_btn\" > \r\n               <IconContext.Provider value={{ color: \"white\", size:\"2.5em\" }}>\r\n            < FcStatistics/> \r\n            </IconContext.Provider> \r\n            </Button></a>\r\n               <Button className=\"logout_btn\"  onClick={() => dispatch(logout())}   > \r\n               <IconContext.Provider value={{ color: \"white\", size:\"2.5em\" }}>\r\n            < RiLogoutBoxRLine/> \r\n            </IconContext.Provider> </Button>     </div>        \r\n</div>\r\n<div className=\"filter\">\r\n           <label>\r\nAll\r\n               <input type='radio' value='All' checked={value==='All'} onChange={(e)=>setValue(e.target.value)} />\r\n           </label>\r\n           <label>\r\nPositive\r\n               <input type='radio' value='Positive' checked={value==='Positive'}  onChange={(e)=>setValue(e.target.value)}  />\r\n           </label>\r\n           <label>\r\nNegative\r\n               <input type='radio' value='Negative' checked={value==='Negative'}  onChange={(e)=>setValue(e.target.value)}  />\r\n           </label>\r\n           <label>\r\nNot yet\r\n               <input type='radio' value='Not yet' checked={value==='Not yet'}   onChange={(e)=>setValue(e.target.value)} />\r\n           </label>\r\n           \r\n    \r\n<div action className=\"search\">  \r\n          <div className=\"field\">\r\n            <input type=\"text\" className=\"input-search\" id=\"input-search\" name=\"input-search\" required\r\n             onChange={(e)=>setSearch(e.target.value)}/>\r\n            <label htmlFor=\"input-search\">Search</label>\r\n          </div> \r\n        </div>\r\n      \r\n</div>\r\n<div className=\"list\">\r\n{(value==='All'?users:users.filter(el=>el.status===value)).map((user,id) =>\r\n               <div   key={id}>\r\n            <div className=\"card\">\r\n            <div className=\"face face1\">\r\n              <div className=\"content\">\r\n                       <IconContext.Provider  value={{ color: \"red\", className: \"trash\", size:\"2em\" }}>\r\n  <GoTrashcan  onClick={()=>dispatch(deleteUser(user._id))} />\r\n  </IconContext.Provider>\r\n                <img style={{width:\"75px\",borderRadius: \"50px\",marginTop: \"-50px\", marginLeft: \"150px\" }} src=\"https://image.shutterstock.com/z/stock-vector-blank-avatar-placeholder-on-transparent-background-1097191784.jpg\" alt=\"profile-sample4\" className=\"profile\" />\r\n            <h4 className=\"name\">Name: {user.name}</h4>\r\n\r\n            <h4>Result: {user.status} </h4>\r\n\r\n            <h4>Reason: {user.reason} </h4>\r\n\r\n            <h4 className={user.status!=='Not yet'?'description_task':''}>Test date: {user.test_date}</h4>\r\n            <h4 className={user.status!=='Not yet'?'description_task':''} >Result date: {user.result_date}</h4>\r\n                       </div>\r\n            </div>\r\n            <div className=\"face face2\">\r\n              <div className=\"content\">\r\n            <h4>Email: {user.email}</h4>\r\n            <h4>Phone: {user.phone}</h4>\r\n            <h4>Age: {user.age} years old</h4>\r\n            <Form.Group as={Col} controlId=\"formGridState\">\r\n      <Form.Label>Result</Form.Label>\r\n\r\n      <Form.Control as=\"select\" value={user.status}   onChange={(e)=>{const x= e.target.value; setStatus(x)}} name=\"result\">\r\n        <option value=\"Not yet\">Not yet</option>\r\n        <option value=\"Positive\">Positive</option>\r\n        <option value=\"Negative\"  >Negative</option>\r\n      </Form.Control>\r\n      <IconContext.Provider  value={{ color: \"black\", className: \"ok\", size:\"2em\" }}>\r\n  <RiCheckboxCircleLine  onClick={()=>{dispatch(editUser(user._id,{status} ));dispatch(getAllUsers())}} />\r\n  </IconContext.Provider>\r\n    </Form.Group> \r\n                        </div>\r\n             </div>\r\n          </div>    \r\n    </div>   \r\n )}\r\n </div>\r\n <div id=\"statistics\" >\r\n            <h1 style={{color:\" rgb(100, 131, 192)\"}}>Statistics</h1>\r\n            <div  >\r\n    <Bar data={graph} options={options}/>   \r\n            </div>\r\n    <Pie data={graphPie} options={pieOptions}/>   \r\n         </div>\r\n\r\n         <a href=\"#team\"><Button className=\"top_btn\" > \r\n               <IconContext.Provider value={{ color: \"white\", size:\"2.5em\" }}>\r\n            < FaChevronUp/> \r\n            </IconContext.Provider> \r\n            </Button></a>\r\n       </section>\r\n             </>\r\n    )\r\n}\r\n\r\nexport default AdminProfile;","C:\\Users\\user\\Desktop\\Labo_project\\client\\src\\Redux\\actions\\authActions.js",[],"C:\\Users\\user\\Desktop\\Labo_project\\client\\src\\components\\Dashboard\\UserProfile.js",[],["75","76"],"C:\\Users\\user\\Desktop\\Labo_project\\client\\src\\components\\Home\\Home.js",[],"C:\\Users\\user\\Desktop\\Labo_project\\client\\src\\components\\Auth\\Login.js",[],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"77","replacedBy":"81"},{"ruleId":"79","replacedBy":"82"},{"ruleId":"77","replacedBy":"83"},{"ruleId":"79","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":23,"column":8,"nodeType":"87","endLine":23,"endColumn":24,"suggestions":"88"},{"ruleId":"85","severity":1,"message":"89","line":30,"column":2,"nodeType":"87","endLine":30,"endColumn":28,"suggestions":"90"},{"ruleId":"77","replacedBy":"91"},{"ruleId":"79","replacedBy":"92"},{"ruleId":"77","replacedBy":"93"},{"ruleId":"79","replacedBy":"94"},{"ruleId":"85","severity":1,"message":"95","line":103,"column":5,"nodeType":"87","endLine":103,"endColumn":12,"suggestions":"96"},{"ruleId":"77","replacedBy":"97"},{"ruleId":"79","replacedBy":"98"},"no-native-reassign",["99"],"no-negated-in-lhs",["100"],["99"],["100"],["99"],["100"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getUser'. Either include it or remove the dependency array.","ArrayExpression",["101"],"React Hook useEffect has a missing dependency: 'getUsers'. Either include it or remove the dependency array.",["102"],["99"],["100"],["99"],["100"],"React Hook useEffect has a missing dependency: 'chart'. Either include it or remove the dependency array.",["103"],["99"],["100"],"no-global-assign","no-unsafe-negation",{"desc":"104","fix":"105"},{"desc":"106","fix":"107"},{"desc":"108","fix":"109"},"Update the dependencies array to be: [token, dispatch, getUser]",{"range":"110","text":"111"},"Update the dependencies array to be: [token, isAdmin, dispatch, getUsers]",{"range":"112","text":"113"},"Update the dependencies array to be: [chart, users]",{"range":"114","text":"115"},[825,841],"[token, dispatch, getUser]",[959,985],"[token, isAdmin, dispatch, getUsers]",[3447,3454],"[chart, users]"]